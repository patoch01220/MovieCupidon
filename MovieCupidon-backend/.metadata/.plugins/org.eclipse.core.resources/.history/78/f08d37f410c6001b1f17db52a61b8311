package ch.unige;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.inject.Inject;
import javax.resource.spi.ConfigProperty;

import java.nio.charset.StandardCharsets;
import java.security.spec.KeySpec;
import java.util.Base64;

import java.math.BigInteger;
import java.security.MessageDigest;

public class SecurityUtility {
	
	@ConfigProperty(name="security.aes.key", defaultValue="!")
	private static final String SECRET_KEY;
	
    private static final String SALT = "ssshhhhhhhhhhh!!!!";
    private static final byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


    private static String getSHA256(String input) {
        String toReturn = null;
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            digest.reset();
            digest.update(input.getBytes("utf8"));
            toReturn = String.format("%064x", new BigInteger(1, digest.digest()));
        } catch (Exception e) {
            e.printStackTrace();
        }

        return toReturn;
    }

    private static String cutString(String stringToCut) throws Exception {
        String[] splitted = stringToCut.split("}");
        splitted[0] += "}";
        if (splitted[1].equals(getSHA256(splitted[0]))){
            return splitted[0];
        }
        else{
            throw new Exception("Message and SHA Different");
        }
    }


    public static String encrypt(String strToEncrypt) {
        try {

            strToEncrypt += getSHA256(strToEncrypt); //concatenate message + sha256(message)

            IvParameterSpec ivspec = new IvParameterSpec(iv);

            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
            return Base64.getEncoder()
                    .encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));
        } catch (Exception e) {
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }


    public static String decrypt(String strToDecrypt) throws Exception {
        IvParameterSpec ivspec = new IvParameterSpec(iv);

        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
        SecretKey tmp = factory.generateSecret(spec);
        SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);

        String decrypted = new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));

        decrypted = cutString(decrypted);

        return decrypted;
    }


    public static void main(String[] args) {
        String message = "{\n" +
                "token: AAAAAA\n" +
                "ownerID : oauth\n" +
                "joinList : [oauthJ1, oauthJ2 ...]\n" +
                "}";

        String encryptMess = SecurityUtility.encrypt(message);
        String decrypted = "";
        try {
            decrypted = SecurityUtility.decrypt(encryptMess);
        }
        catch (Exception e){
            System.out.println("Il y a eu une erreur");
        }

        System.out.println(encryptMess);
        System.out.println(decrypted);
        System.out.println(message.equals(decrypted));


    }

}
